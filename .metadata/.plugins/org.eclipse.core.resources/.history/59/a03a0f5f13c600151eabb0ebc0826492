package rithmtime.tv.tests;

import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;

public class SmokeTest
{
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();

  @Before
  public void setUp() throws Exception {
    driver = new FirefoxDriver();
    baseUrl = "http://rithm-time.tv/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testAuthorizationTrue() throws Exception {
    openMainPage();
	  //clear and  set login
    setLogin();
	  //clear and  set password
    setPassword("Passw0rd");
    // click authorization
    clickAuthorization();
  }
  @Test
  public void testAuthorizationWronglogin() throws Exception {
    openMainPage();
	  //clear and  set login
    setLogin();
	  //clear and  set password
    setPassword("Passw0rd");
    // click authorization
    clickAuthorization();
  }
  public void testAuthorizationWrongPassword() throws Exception {
	    openMainPage();
		  //clear and  set login
	    setLogin();
		  //clear and  set password
	    setPassword("Passw0rd");
	    // click authorization
	    clickAuthorization();
	  }
  public void testAuthorizationEmptyPassword() throws Exception {
	    openMainPage();
		  //clear and  set login
	    setLogin();
		  //clear and  set password
	    setPassword("Passw0rd");
	    // click authorization
	    clickAuthorization();
	  }
  public void testAuthorizationEmptylogin() throws Exception {
	    openMainPage();
		  //clear and  set login
	    setLogin();
		  //clear and  set password
	    setPassword("Passw0rd");
	    // click authorization
	    clickAuthorization();
	  }
  
  

private void clickAuthorization() {
	driver.findElement(By.id("auth_btn")).click();
}

private void setPassword(String password) {
	driver.findElement(By.id("auth_password")).clear();
    driver.findElement(By.id("auth_password")).sendKeys(password);
}

private void setLogin() {
	driver.findElement(By.xpath("//*[@id=\"auth_login\"]")).clear();
    driver.findElement(By.xpath("//*[@id=\"auth_login\"]")).sendKeys("mshegolev@gmail.com");
}

private void openMainPage() {
	//open main page
	  driver.get(baseUrl + "/");
}

  @After
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}


