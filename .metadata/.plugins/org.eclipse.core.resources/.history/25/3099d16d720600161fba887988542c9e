package qaframework.rtv.tests;

import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;

public class SmokeTest {
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();

  @Before
  public void setUp() throws Exception {
    driver = new FirefoxDriver();
    baseUrl = "http://rithm-time.tv/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testAbonentType1() throws Exception {
    openMainPage();
    AccountData account = new AccountData();
    account.username="test001";
    account.password="001test";
	fillLoginForm(account);
    clickButtonLogin();
    //driver.findElement(By.cssSelector("button.navbar-toggle")).click(); // open list with button Exit
    clickButtonExit();
  }
  @Test
  public void testNonAbonentType() throws Exception {
    openMainPage();
    fillLoginForm(new AccountData("", ""));
    clickButtonLogin();
    //driver.findElement(By.cssSelector("button.navbar-toggle")).click(); // open list with button Exit
    clickButtonExit();
  }
  

private void clickButtonExit() {
	driver.findElement(By.id("exit")).click();
}

private void clickButtonLogin() {
	driver.findElement(By.id("auth_btn")).click();
}

private void fillLoginForm(AccountData account) {
	driver.findElement(By.id("auth_login")).clear();
    driver.findElement(By.id("auth_login")).sendKeys(account.username);
    driver.findElement(By.id("auth_password")).clear();
    driver.findElement(By.id("auth_password")).sendKeys(account.password);
}

private void openMainPage() {
	driver.get(baseUrl + "/");
}

private void warrningMessage(){
	driver.findElement(By.id('auth_message'));
}

  @After
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
